@import "bulma_overrides.scss";
@import "bulma/bulma";
body {
  margin: 0;
  padding: 0;
  font-family: "Times New Roman", Times, serif;
}

$MAIN_BACKGROUND_COLOR: $grey-light;
.app-container {
  background-color: $MAIN_BACKGROUND_COLOR;
}

/* HOME PAGE */

.home-page {
  background-image: linear-gradient($MAIN_BACKGROUND_COLOR, $grey);
  height: 80vh;
}

/* PROPERTIES PAGE */

.properties-page {
  background-image: linear-gradient(
    $MAIN_BACKGROUND_COLOR,
    $grey-dark
  ); //background-color: $MAIN_BACKGROUND_COLOR;
}

// Map
.map-container {
  height: 100vh;
  width: 100%;
}

.marker {
  height: 15px;
  width: 15px;
}

/* LOGIN PAGE */

.login-page {
  background-color: $MAIN_BACKGROUND_COLOR;
  height: 80vh;
  .box {
    width: 50%;
    margin: auto;
  }
}

/* LOADER */

$base-line-height: 24px;
$white: rgb(255, 255, 255);
$off-white: rgba($white, 0.2);
$spin-duration: 1s;
$pulse-duration: 750ms;
.loading {
  margin: auto;
  position: relative;
  width: ($base-line-height / 4);
  height: $base-line-height;
  background: $off-white;
  animation: pulse $pulse-duration infinite;
  animation-delay: ($pulse-duration / 3);
  &:before,
  &:after {
    content: "";
    position: absolute;
    display: block;
    height: ($base-line-height / 1.5);
    width: ($base-line-height / 4);
    background: $off-white;
    top: 50%;
    transform: translateY(-50%);
    animation: pulse $pulse-duration infinite;
  }
  &:before {
    left: -($base-line-height / 2);
  }
  &:after {
    left: ($base-line-height / 2);
    animation-delay: ($pulse-duration / 1.5);
  }
}

@keyframes pulse {
  50% {
    background: $white;
  }
}

/* UTILS */

.center {
  text-align: center;
}

.black {
  background-color: black;
}

$sizeUnit: rem;
$marginKey: "margin";
$paddingKey: "padding";
$separator: "-";
$sizes: (("none", 0), ("sm", 0.5), ("md", 1), ("lg", 2));
$positions: ("top", "right", "bottom", "left");
@function sizeValue($key, $value) {
  @return if($key== "none", 0, $value + $sizeUnit);
}

@each $size in $sizes {
  $sizeKey: nth($size, 1);
  $sizeValue: nth($size, 2);
  .#{$marginKey}#{$separator}#{$sizeKey} {
    margin: sizeValue($sizeKey, $sizeValue);
  }
  @each $position in $positions {
    .#{$marginKey}#{$separator}#{$position}#{$separator}#{$sizeKey} {
      margin-#{$position}: sizeValue($sizeKey, $sizeValue);
    }
    .#{$paddingKey}#{$separator}#{$position}#{$separator}#{$sizeKey} {
      padding-#{$position}: sizeValue($sizeKey, $sizeValue);
    }
  }
}
